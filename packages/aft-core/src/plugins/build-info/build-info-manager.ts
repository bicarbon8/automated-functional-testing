import { AftConfig, aftConfig } from "../../configuration/aft-config";
import { AftLogger } from "../../logging/aft-logger";
import { SafeStringOption, convert } from "../../helpers/convert";
import { Err } from "../../helpers/err";
import { MachineInfoData, machineInfo } from "../../helpers/machine-info";
import { pluginLoader } from "../plugin-loader";
import { BuildInfoPlugin } from "./build-info-plugin";
import { ProcessingResult } from "../../helpers/custom-types";

/**
 * a class that manages the `BuildInfoPlugin` instances that
 * generate a build specific string for use in identifying individual
 * test execution runs across multiple projects in a CICD environment
 * returning either a string containing `BUILDNAME_BUILDNUMBER` or
 * if there are no enabled `BuildInfoPlugin` instances, a string
 * containing `USERNAME_MACHINENAME_YYYYMMDD`
 */
export class BuildInfoManager {
    public readonly aftCfg: AftConfig;

    private readonly _plugins: Array<BuildInfoPlugin> = new Array<BuildInfoPlugin>();
    private readonly _safeStrOpt: SafeStringOption[] = [{exclude: /[\()\;\\\/\|\<\>""'*&^%$#@!,.\-\+_=\?]/gi, replaceWith: ''}]; // eslint-disable-line no-useless-escape
    private readonly _aftLogger: AftLogger;
    
    constructor(aftCfg?: AftConfig) {
        this.aftCfg = aftCfg ?? aftConfig;
        this._aftLogger = new AftLogger(this.constructor.name, aftCfg);
    }

    get plugins(): Array<BuildInfoPlugin> {
        if (this._plugins.length === 0) {
            this._plugins.push(...pluginLoader.getEnabledPluginsByType(BuildInfoPlugin, this.aftCfg));
        }
        return this._plugins;
    }

    /**
     * generates a build specific string for use in identifying individual
     * test execution runs across multiple projects in a CICD environment
     * @returns either a string containing `buildName_buildNumber` or
     * if there are no enabled `BuildInfoPlugin` instances, a string
     * containing `USERNAME_MACHINENAME_YYYYMMDD`
     */
    async get(): Promise<string> {
        const bName = await this.buildName();
        const bNum = await this.buildNumber();
        return `${bName}_${bNum}`;
    }

    /**
     * gets the first enabled `IBuildInfoPlugin` and returns the value from it's `buidlName`
     * function or a name consisting of `USERNAME_MACHINENAME` if no enabled plugins found
     * @returns the build name generated by the first enabled `IBuildInfoPlugin.buildName` or 
     * a name consisting of `USERNAME_MACHINENAME` if no enabled plugins found
     */
    async buildName(): Promise<string> {
        const plugin = this.plugins.find(p => p?.enabled);
        if (plugin) {
            const result: ProcessingResult<string> = await Err.handleAsync(() => plugin.buildName(), {
                errLevel: 'trace',
                logger: this._aftLogger
            });
            if (result.result) {
                return result.result;
            }
        }
        const mi: MachineInfoData = machineInfo.data;
        const username: string = convert.toSafeString(mi.user, this._safeStrOpt);
        const machine: string = convert.toSafeString(mi.hostname, this._safeStrOpt);
        return `${username.toLocaleUpperCase()}_${machine.toLocaleUpperCase()}`;
    }

    /**
     * gets the first enabled `IBuildInfoPlugin` and returns the value from it's `buildNumber`
     * function or a name consisting of the current date like: `YYYYMMDD` if no enabled plugins found
     * @returns the build name generated by the first enabled `IBuildInfoPlugin.buildNumber` or 
     * a name consisting of the current date like: `YYYYMMDD` if no enabled plugins found
     */
    async buildNumber(): Promise<string> {
        const plugin = this.plugins.find(p => p?.enabled);
        if (plugin) {
            const result: ProcessingResult<string> = await Err.handleAsync(() => plugin.buildNumber(), {
                errLevel: 'trace',
                logger: this._aftLogger
            });
            if (result.result) {
                return result.result;
            }
        }
        const d = new Date();
        const month: number = d.getUTCMonth() + 1;
        let monthStr: string = month.toString();
        if (month < 10) {
            monthStr = '0' + month;
        }
        const day: number = d.getUTCDate();
        let dayStr: string = day.toString();
        if (day < 10) {
            dayStr = '0' + day;
        }
        const now: string = convert.toSafeString(`${d.getUTCFullYear()}${monthStr}${dayStr}`, this._safeStrOpt);
        return now;
    }
}
